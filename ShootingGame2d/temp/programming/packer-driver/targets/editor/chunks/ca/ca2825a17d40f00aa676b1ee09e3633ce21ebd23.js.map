{"version":3,"sources":["file:///D:/indie_games/project1/shooting_game_2d/ShootingGame2d/assets/script/game.ts"],"names":["_decorator","Component","PhysicsSystem2D","v2","TiledMap","ccclass","property","game","onLoad","instance","enable","gravity","start","layer","tiledMap","getLayer","layerSize","getLayerSize","i","width","j","height","tiled","getTiledTileAt","isValid","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAA2BC,MAAAA,e,OAAAA,e;AAAuBC,MAAAA,E,OAAAA,E;AAAIC,MAAAA,Q,OAAAA,Q;;;;;;;;;OACrE;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBN,U;;sBAGjBO,I,WADZF,OAAO,CAAC,MAAD,C,UAEHC,QAAQ,CAACF,QAAD,C,2BAFb,MACaG,IADb,SAC0BN,SAD1B,CACoC;AAAA;AAAA;;AAAA;AAAA;;AAIhCO,QAAAA,MAAM,GAAS;AACXN,UAAAA,eAAe,CAACO,QAAhB,CAAyBC,MAAzB,GAAkC,IAAlC,CADW,CAC6B;;AACxCR,UAAAA,eAAe,CAACO,QAAhB,CAAyBE,OAAzB,GAAmCR,EAAE,CAAC,CAAD,EAAI,CAAJ,CAArC;AACH;;AAEDS,QAAAA,KAAK,GAAG;AACJ,cAAIC,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,CAAuB,MAAvB,CAAZ;AACA,cAAIC,SAAS,GAAGH,KAAK,CAACI,YAAN,EAAhB;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,SAAS,CAACG,KAA9B,EAAqCD,CAAC,EAAtC,EACA;AACI,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACK,MAA9B,EAAsCD,CAAC,EAAvC,EACA;AACI,kBAAIE,KAAK,GAAGT,KAAK,CAACU,cAAN,CAAqBL,CAArB,EAAwBE,CAAxB,EAA2B,IAA3B,CAAZ;;AACA,kBAAIE,KAAK,CAACE,OAAV,EACA,CACI;AACH;AACJ;AACJ;AACJ;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AA5B+B,O;;;;;iBAEL,I","sourcesContent":["import { _decorator, Component, director, Node, PhysicsSystem2D, math, v2, TiledMap, Prefab } from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('game')\r\nexport class game extends Component {\r\n    @property(TiledMap)\r\n    public tiledMap:TiledMap = null;\r\n\r\n    onLoad(): void {\r\n        PhysicsSystem2D.instance.enable = true; //3.8默认开启\r\n        PhysicsSystem2D.instance.gravity = v2(0, 0);\r\n    }\r\n\r\n    start() {\r\n        let layer = this.tiledMap.getLayer('wall');\r\n        let layerSize = layer.getLayerSize();\r\n\r\n        for (let i = 0; i < layerSize.width; i++)\r\n        {\r\n            for (let j = 0; j < layerSize.height; j++)\r\n            {\r\n                let tiled = layer.getTiledTileAt(i, j, true);\r\n                if (tiled.isValid)\r\n                {\r\n                    //tiled.node.group = 'wall';\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}