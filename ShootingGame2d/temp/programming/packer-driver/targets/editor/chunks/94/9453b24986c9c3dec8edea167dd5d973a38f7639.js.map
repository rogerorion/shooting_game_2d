{"version":3,"sources":["file:///D:/indie_games/project1/shooting_game_2d/ShootingGame2d/assets/script/game.ts"],"names":["_decorator","Component","PhysicsSystem2D","TiledMap","RigidBody2D","ERigidBody2DType","BoxCollider2D","EPhysics2DDrawFlags","Collider2D","Contact2DType","ccclass","property","game","onLoad","instance","enable","debugDrawFlags","Aabb","start","layer","tiledMap","getLayer","layerSize","getLayerSize","tiledCellSize","getTileSize","i","width","j","height","tiled","getTiledTileAt","grid","body","node","addComponent","type","Static","collider","getComponent","on","BEGIN_CONTACT","onBeginContact","selfCollider","otherCollider","contact","console","log","update","deltaTime"],"mappings":";;;;;;;;;;;;;;;;AAASA,MAAAA,U,OAAAA,U;AAAYC,MAAAA,S,OAAAA,S;AAA2BC,MAAAA,e,OAAAA,e;AAA2BC,MAAAA,Q,OAAAA,Q;AAAUC,MAAAA,W,OAAAA,W;AAAaC,MAAAA,gB,OAAAA,gB;AAAkBC,MAAAA,a,OAAAA,a;AAAeC,MAAAA,mB,OAAAA,mB;AAClIC,MAAAA,U,OAAAA,U;AAAYC,MAAAA,a,OAAAA,a;;;;;;;;;OACP;AAAEC,QAAAA,OAAF;AAAWC,QAAAA;AAAX,O,GAAwBX,U;;sBAGjBY,I,WADZF,OAAO,CAAC,MAAD,C,UAEHC,QAAQ,CAACR,QAAD,C,2BAFb,MACaS,IADb,SAC0BX,SAD1B,CACoC;AAAA;AAAA;;AAAA;AAAA;;AAIhCY,QAAAA,MAAM,GAAS;AACXX,UAAAA,eAAe,CAACY,QAAhB,CAAyBC,MAAzB,GAAkC,IAAlC,CADW,CAC6B;AACxC;;AACAb,UAAAA,eAAe,CAACY,QAAhB,CAAyBE,cAAzB,GAA0CT,mBAAmB,CAACU,IAA9D,CAHW,CAGyD;AACvE;;AAEDC,QAAAA,KAAK,GAAG;AACJ,cAAIC,KAAK,GAAG,KAAKC,QAAL,CAAcC,QAAd,CAAuB,MAAvB,CAAZ;AACA,cAAIC,SAAS,GAAGH,KAAK,CAACI,YAAN,EAAhB;AACA,cAAIC,aAAa,GAAG,KAAKJ,QAAL,CAAcK,WAAd,EAApB;;AAEA,eAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,SAAS,CAACK,KAA9B,EAAqCD,CAAC,EAAtC,EACA;AACI,iBAAK,IAAIE,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGN,SAAS,CAACO,MAA9B,EAAsCD,CAAC,EAAvC,EACA;AACI,kBAAIE,KAAK,GAAGX,KAAK,CAACY,cAAN,CAAqBL,CAArB,EAAwBE,CAAxB,EAA2B,IAA3B,CAAZ;;AACA,kBAAIE,KAAK,CAACE,IAAN,IAAc,CAAlB,EACA;AACI,oBAAIC,IAAI,GAAGH,KAAK,CAACI,IAAN,CAAWC,YAAX,CAAwB/B,WAAxB,CAAX;AACA6B,gBAAAA,IAAI,CAACG,IAAL,GAAY/B,gBAAgB,CAACgC,MAA7B,CAFJ,CAGI;AACA;;AAEA,oBAAIC,QAAQ,GAAGR,KAAK,CAACI,IAAN,CAAWC,YAAX,CAAwB7B,aAAxB,CAAf,CANJ,CAOI;AACA;AACA;AACA;AACH;AACJ;AACJ,WAxBG,CA0BJ;;;AACA,cAAIgC,QAAQ,GAAG,KAAKC,YAAL,CAAkB/B,UAAlB,CAAf;;AACA,cAAI8B,QAAJ,EAAc;AACVA,YAAAA,QAAQ,CAACE,EAAT,CAAY/B,aAAa,CAACgC,aAA1B,EAAyC,KAAKC,cAA9C,EAA8D,IAA9D,EADU,CAEV;AACA;AACA;AACH;AACJ;;AAEDA,QAAAA,cAAc,CAACC,YAAD,EAA2BC,aAA3B,EAAsDC,OAAtD,EACd;AACIC,UAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACH;;AAEDC,QAAAA,MAAM,CAACC,SAAD,EAAoB,CAEzB;;AArD+B,O;;;;;iBAEL,I","sourcesContent":["import { _decorator, Component, director, Node, PhysicsSystem2D, math, v2, TiledMap, RigidBody2D, ERigidBody2DType, BoxCollider2D, EPhysics2DDrawFlags\r\n,Collider2D, Contact2DType, IPhysics2DContact} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\n\r\n@ccclass('game')\r\nexport class game extends Component {\r\n    @property(TiledMap)\r\n    public tiledMap:TiledMap = null;\r\n\r\n    onLoad(): void {\r\n        PhysicsSystem2D.instance.enable = true; //3.8默认开启\r\n        //PhysicsSystem2D.instance.gravity = v2(0, 0);\r\n        PhysicsSystem2D.instance.debugDrawFlags = EPhysics2DDrawFlags.Aabb  //打开了调试模式\r\n    }\r\n\r\n    start() {\r\n        let layer = this.tiledMap.getLayer('wall');\r\n        let layerSize = layer.getLayerSize();\r\n        let tiledCellSize = this.tiledMap.getTileSize();\r\n\r\n        for (let i = 0; i < layerSize.width; i++)\r\n        {\r\n            for (let j = 0; j < layerSize.height; j++)\r\n            {\r\n                let tiled = layer.getTiledTileAt(i, j, true);\r\n                if (tiled.grid != 0)\r\n                {\r\n                    let body = tiled.node.addComponent(RigidBody2D);\r\n                    body.type = ERigidBody2DType.Static;\r\n                    // body.group = 1;\r\n                    // body.gravityScale = 1;\r\n\r\n                    let collider = tiled.node.addComponent(BoxCollider2D);\r\n                    // collider.offset = v2(tiledCellSize.width/2, tiledCellSize.height/2);\r\n                    // collider.size = tiledCellSize;\r\n                    // collider.group = 1;\r\n                    // collider.apply();\r\n                }\r\n            }\r\n        }\r\n\r\n        // 注册单个碰撞体的回调函数\r\n        let collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            // collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n            // collider.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n            // collider.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n        }\r\n    }\r\n\r\n    onBeginContact(selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null)\r\n    {\r\n        console.log('onBeginContact -- ');\r\n    }\r\n\r\n    update(deltaTime: number) {\r\n        \r\n    }\r\n}\r\n\r\n\r\n"]}