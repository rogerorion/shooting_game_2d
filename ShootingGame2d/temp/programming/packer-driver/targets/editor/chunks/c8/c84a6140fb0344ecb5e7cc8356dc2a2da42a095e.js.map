{"version":3,"sources":["file:///D:/indie_games/project1/shooting_game_2d/ShootingGame2d/assets/script/hero.ts"],"names":["_decorator","Animation","Component","input","Input","KeyCode","RigidBody2D","v2","Vec3","Collider2D","Contact2DType","ccclass","property","Inputs","hero","_speed","_curPosition","_deltaPos","_state","_animation","_lv","onLoad","console","log","node","position","on","EventType","KEY_DOWN","onKeyDown","KEY_UP","onKeyUp","getComponentInChildren","onSetState","state","animationName","play","start","collider","getComponent","BEGIN_CONTACT","onBeginContact","END_CONTACT","onEndContact","PRE_SOLVE","onPreSolve","POST_SOLVE","onPostSolve","selfCollider","otherCollider","contact","group","update","deltaTime","linearVelocity","KEY_D","y","x","KEY_A","KEY_W","KEY_S","event","keyCode"],"mappings":"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","sourcesContent":["import { _decorator, Animation, Component, EventKeyboard, input, Input, KeyCode, RigidBody2D, v2, Vec3,Collider2D, Contact2DType, IPhysics2DContact} from 'cc';\r\nconst { ccclass, property } = _decorator;\r\nconst Inputs = {}\r\n\r\n@ccclass('hero')\r\nexport class hero extends Component {\r\n    private _speed:number = 0;\r\n    private _curPosition: Vec3;\r\n    private _deltaPos: Vec3;\r\n    private _state:number = 0;\r\n    private _animation;\r\n    private _lv;\r\n\r\n    onLoad() {        \r\n        console.log(\"onLoad\");\r\n        this._speed = 5;\r\n        this._curPosition = this.node.position;\r\n        this._deltaPos = new Vec3(0, 0, 0);\r\n        input.on(Input.EventType.KEY_DOWN, this.onKeyDown, this);\r\n        input.on(Input.EventType.KEY_UP, this.onKeyUp, this);\r\n\r\n        //this._state\r\n        this._animation = this.node.getComponentInChildren(Animation);\r\n    }\r\n\r\n    onSetState(state)\r\n    {\r\n        if (state == this._state)\r\n            return;\r\n        this._state = state;\r\n        var animationName = 'idle';\r\n        if (this._state == 1)\r\n            animationName = 'run';\r\n\r\n        this._animation.play(animationName);\r\n    }\r\n\r\n    start() {                       \r\n        // 注册单个碰撞体的回调函数\r\n        let collider = this.getComponent(Collider2D);\r\n        if (collider) {\r\n            collider.on(Contact2DType.BEGIN_CONTACT, this.onBeginContact, this);\r\n            collider.on(Contact2DType.END_CONTACT, this.onEndContact, this);\r\n            collider.on(Contact2DType.PRE_SOLVE, this.onPreSolve, this);\r\n            collider.on(Contact2DType.POST_SOLVE, this.onPostSolve, this);\r\n        }\r\n    }\r\n\r\n    onBeginContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 只在两个碰撞体开始接触时被调用一次\r\n        console.log('onBeginContact -- selfCollider.group = %d', selfCollider.group);\r\n        console.log('onBeginContact -- otherCollider.group = %d', otherCollider.group);\r\n    }\r\n    onEndContact (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 只在两个碰撞体结束接触时被调用一次\r\n        console.log('onEndContact');\r\n    }\r\n    onPreSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 每次将要处理碰撞体接触逻辑时被调用\r\n        console.log('onPreSolve');\r\n    }\r\n    onPostSolve (selfCollider: Collider2D, otherCollider: Collider2D, contact: IPhysics2DContact | null) {\r\n        // 每次处理完碰撞体接触逻辑时被调用\r\n        console.log('onPostSolve');\r\n    }\r\n\r\n    update(deltaTime: number) {     //每帧调用\r\n        var state = 0;\r\n        this._lv = this.node.getComponent(RigidBody2D).linearVelocity;\r\n        //this._curPosition = this.node.position;\r\n        if (Inputs[KeyCode.KEY_D] == 1)\r\n        {\r\n            console.log(\"left\");\r\n            // this._deltaPos.x = this._speed * deltaTime;\r\n            // Vec3.add(this._curPosition, this._curPosition, this._deltaPos);\r\n            // this.node.setPosition(this._curPosition);\r\n            this._lv.y = 0;\r\n            this._lv.x = this._speed;\r\n            state = 1;\r\n        }\r\n        else if(Inputs[KeyCode.KEY_A] == 1)\r\n        {\r\n            console.log(\"right\");\r\n            // this._deltaPos.x = -this._speed * deltaTime;\r\n            // Vec3.add(this._curPosition, this._curPosition, this._deltaPos);\r\n            // this.node.setPosition(this._curPosition);\r\n\r\n            this._lv.y = 0;\r\n            this._lv.x = 0 - this._speed;\r\n            state = 1;\r\n        }\r\n        else if(Inputs[KeyCode.KEY_W] == 1)\r\n        {\r\n            console.log(\"up\");\r\n            // this._deltaPos.y = this._speed * deltaTime;\r\n            // Vec3.add(this._curPosition, this._curPosition, this._deltaPos);\r\n            // this.node.setPosition(this._curPosition);\r\n\r\n            this._lv.x = 0;\r\n            this._lv.y = this._speed;\r\n            state = 1;\r\n        }\r\n        else if(Inputs[KeyCode.KEY_S] == 1)\r\n        {\r\n            console.log(\"down\");\r\n            // this._deltaPos.y = -this._speed * deltaTime;\r\n            // Vec3.add(this._curPosition, this._curPosition, this._deltaPos);\r\n            // this.node.setPosition(this._curPosition);\r\n\r\n            this._lv.x = 0;\r\n            this._lv.y = 0 - this._speed;\r\n            state = 1;\r\n        }\r\n        else\r\n        {\r\n            this._lv = v2(0, 0);\r\n        }\r\n\r\n        this.node.getComponent(RigidBody2D).linearVelocity = this._lv;\r\n\r\n        this.onSetState(state);\r\n    }\r\n\r\n    onKeyDown(event: EventKeyboard) {\r\n        Inputs[event.keyCode] = 1;\r\n    }\r\n\r\n    onKeyUp(event: EventKeyboard)\r\n    {\r\n        Inputs[event.keyCode] = 0;\r\n    }\r\n}\r\n\r\n\r\n"]}